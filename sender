#!/bin/bash
#
# @file sender
# â˜†  Script to send g-code to the Arduino GrblShield
# @author Alister Lewis-Bowen <alister@different.com>
# @requires color <http://code.google.com/p/ansi-color/>
# @see https://github.com/winder/Universal-G-Code-Sender
#
# This software is distributed under the the MIT License.
#
# Copyright (c) 2012 Alister Lewis-Bowen
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

#
# Bootstrap
#
LIB=$( cd "$( dirname "$0" )" && pwd )/lib
source $LIB/core       # core vars and functions
source $LIB/connection # connection logic
source $LIB/jog        # jog logic
source $LIB/waypoints  # waypoint manager
source $LIB/send       # g-code logic

function _helpCmd {
    local helpText="
$(color bd)G-code sender for Arduino GrblShield$(color)

$(color bd)Usage: sender $(color ul)g-code-file$(color)
"
    echo "$helpText"
}

function _helpLoop {
    local _text="
"
    echo "$text"
}

case "$1" in
    '-h'|'--help'|'help')   _helpCmd;;
esac

sendImport $GCODE_FILE
conOpen
wpGetLimit

while true; do

    [ "$MODE" == "$START_UP" ] && _helpLoop # offer some help on start up
    MODE=$RAW                               # default to raw mode

    echo -n "$(color yellow)[sender] > $(color)"
    read input

    case "$input" in
        :commands|:c)   _helpLoop;;
        :exit|:e)       conClose;;
        :list|:l)          cList;;
        :send|:s)          cSend;;
        * ) # Process raw input
            if [ "${input:0:1}" != ':' ]; then
                conSend "$input"
                echo
            else _helpLoop; fi
            ;;
    esac
done
