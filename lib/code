#!/bin/bash
#
# @file send
# â˜†  G-code sender logic for gcode_sender
# @author Alister Lewis-Bowen <alister@different.com>
# @requires color <http://code.google.com/p/ansi-color/>
#
# This software is distributed under the the MIT License.
#
# Copyright (c) 2012 Alister Lewis-Bowen
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

#
# G-code file
GCODE_FILE=$1
#
# G-code instructions
#
GCODE=()
#
# Total g-code instructions
#
TOTAL_LINES=
#
# Current g-code instruction
#
CURRENT_LINE=0
#
# Current g-code instruction
#
LINES_BATCHED=3

function sendImport {
    local file=$1
    local ln=0
    if [ -r $file ]; then
        while read line; do
            line=$(echo $line | sed 's/(.*)//')
            [ -n "$line" ] && {
                GCODE[$ln]="$line"
                ln=$(($ln + 1))
            }
        done < $file
        TOTAL_LINES=${#GCODE[@]}
        echo "$(color green)Imported $TOTAL_LINES lines of g-code.$(color)"
    else
        echo "$(color red)Unable to read $file$(color)"
        _helpCmd
        exit 1
    fi
}

function sendList {
    # TODO: show imported g-code to send
    echo 'list code'
}

function sendStatus {
    clear
    local total=${#GCODE[@]}
    local sline=$CURRENT_LINE
    local eline=$(($CURRENT_LINE + $LINES_BATCHED))
    echo "$(code bd white blue) \
total: $total   processing: $sline to $eline \
$(color)"
}

function sendCommands {
    local helpText="$(color yellow)
c .............. show commands
escape ......... pause & exit send mode
cursor up ...... pause & step to previous instruction
cursor down .... pause & step to next instruction
cursor left .... pause & go to first instruction
cursor right ... pause & go to last instruction
space .......... stop/start execution

Batch container $LINES_BATCHED instructions.
$(color)"
    echo "$helpText"
}

function gcSend {
    local char=''
    local key=''
    MODE=$SEND
    jogStatus
    jogCommands
    while read -n1 -s char; do
        key=$(parseEscapeSeq $char)
        echo "char=$char , key=$key"
        case "$key" in
            $KEY_ESC)   MODE=$RAW; echo; break;;
            $KEY_UP)    sendBack; sendStatus;;
            $KEY_DOWN)  sendForward; sendStatus;;
            $KEY_RIGHT) sendLast; sendStatus;;
            $KEY_LEFT)  sendFirst; sendStatus;;
            $KEY_SPACE) sendStart; sendStatus;;
            $KEY_C)     sendStatus; sendCommands;;
        esac
    done
    clear
}
