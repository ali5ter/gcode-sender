# !/bin/bash
#
# @file core
# â˜†  Core vars and functions for gcode_sender
# @author Alister Lewis-Bowen <alister@different.com>
# @requires color <http://code.google.com/p/ansi-color/>
#
# This software is distributed under the the MIT License.
#
# Copyright (c) 2012 Alister Lewis-Bowen
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

#
# Starting directory
#
BASE=$( cd "$( dirname "$0" )" && pwd )
#
# Lib directory
#
LIB=$BASE/lib
#
# Script to listen to the  USB device
#
LISTENER=$LIB/listener
#
# PID of the listener script
#
LISTENER_PID=
#
# Modes
# @see http://phrasegenerator.com/food
#
START_UP='Sizzling Abalone and Kale Chunks tossed with Stewed Meat'
RAW='Creamy Rice Shish-Kebab on a bed of Dried Pulled Pork and Mussel Slices'
JOG='Deep-fried Spam Sandwich with Turkey and Duck Sushi'
MODE=$START_UP
#
# Positions
#
XPOS=0
YPOS=0
ZPOS=0
#
# Limits
#
XMAX=
YMAX=
ZMAX=
#
# Keys
#
KEY_UP='27:91:65'
KEY_DOWN='27:91:66'
KEY_RIGHT='27:91:67'
KEY_LEFT='27:91:68'
KEY_ESC=27
KEY_A=97
KEY_Z=122
KEY_H=104
KEY_C=99

#
#   Split a delimited string into an array
#   e.g. split 'delim' 'string' array_name
#
function split {
    local _ifs=$IFS
    IFS="$1" read -ra $3 <<< "$2"
    IFS=$_ifs
}

#
# Return true (return 0) if variable given is undefined
# e.g. [ undefined $foo ] && echo "$foo not defined"
#
function undefined {
    if [ -z "${1+xxx}" ]; then return 0; fi # not set
    if [ -z "$1" ] && [ "${1+xxx}" = "xxx" ]; then return 0; fi # set but empty
    return 1
}

#
# Create token describing the key pressed.
#
# Useful for keystroke detection, e.g.
#    while read -n1 -s char; do
#        key=$(parseEscapeSeq $char)
#        echo "char=$char , key=$key"
#        case "$key" in
#            $KEY_DOWN) echo'down';;
#        esac
#    done
#
function parseEscapeSeq {
    local key=$(printf '%d' "'$1")
    local ttyState=$(stty -g)
    local chars=''
    local charnum=''
    [ $key -eq 27 ] && {
        stty -icanon min 0 time 0
        read -s chars
        if [ ${#chars} -gt 0 ]; then
            for (( i=0; i<${#chars}; i+=1 )); do
                charnum=$(printf '%d' "'${chars:$i:1}")
                key="$key:$charnum"
            done
        fi
        stty $ttyState &>/dev/null
    }
    echo "$key"
}
