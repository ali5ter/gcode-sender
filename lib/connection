# !/bin/bash
#
# @file connection
# â˜†  Connection functions for gcode_sender
# @author Alister Lewis-Bowen <alister@different.com>
# @requires color <http://code.google.com/p/ansi-color/>
# @see http://lists.berlios.de/pipermail/gpsd-dev/2005-April/001288.html
#
# This software is distributed under the the MIT License.
#
# Copyright (c) 2012 Alister Lewis-Bowen
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

#
# Device store file
#
DEVICE_STORE=~/.gcode_device_store

function conRemoveStore {
    rm -fR $DEVICE_STORE 2>/dev/null
}

function conGetDevice {
    [ -r $DEVICE_STORE ] && {
        DEVICE=$(cat $DEVICE_STORE)
        return 0
    }
    conRemoveStore

    local _ifs=$IFS
    local devices=($(ls -1 /dev/cu.usb* 2>/dev/null))
    local num=${#devices[@]}
    IFS=$_ifs

    [ $num -eq 0 ] && {
        echo "$(color red)Unable to find any USB devices.$(color)"
        exit 1;
    }

    if [ $num -eq 1 ]; then
        DEVICE="${devices[0]}"
        echo -n "$DEVICE" > $DEVICE_STORE
    else
        echo -e "$(color yellow)The following devices are available:"
        for (( i=0; i<$num; i+=1 )); do
            echo -e "$(($i+1))\t${devices[$i]}"
        done
        while true; do
            read -p "Please choose a device: " opt
            [ $opt -gt 0 -a $opt -lt $((num+1)) ] && break
        done
        echo $(color)
        DEVICE="${devices[$(($opt-1))]}"
        echo $DEVICE > $DEVICE_STORE
    fi
}

function conOpen {
    conGetDevice
    conListen
    echo "$(color green)Connecting with Arduino...$(color)"
    echo
    sleep 1 # wait for Arduino to init

}

function conClose {
    echo "$(color green)Closing connection.$(color)"
    echo
    conUnListen
    exit 0
}

function conSend {
    local input="$1"
    [ -z $DEVICE ] && return 1;
    echo "$input" > $DEVICE
    sleep 1 # wait for Arduino to respond
}

function conListen {
    [ -z $DEVICE ] && return 1;
    $LISTENER &
    LISTENER_PID=$(ps aux | grep $LISTENER | grep -v 'grep' | awk '{print $2}')
}

function conUnListen {
    kill -9 $LISTENER_PID &>/dev/null
}
