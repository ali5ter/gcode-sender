#
# @file connection
# â˜†  Connection functions for gcode_sender
# @author Alister Lewis-Bowen <alister@different.com>
# @requires color <http://code.google.com/p/ansi-color/>
#
# This software is distributed under the the MIT License.
#
# Copyright (c) 2012 Alister Lewis-Bowen
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

#
# USB Serial Device to Arduino Uno
#
# @see http://lists.berlios.de/pipermail/gpsd-dev/2005-April/001288.html
#
USB_DEVICE='/dev/cu.usbmodemfd131'

# TODO: Add mode to allow device to be changed

function conOpen {
    [ ! -e $USB_DEVICE ] && {
        echo "$(color red)Unable to find a device at $USB_DEVICE.$(color)"
        exit 1
    }
    conListen
    echo "$(color green)Connecting with Arduino...$(color)"
    echo
    sleep 1 # wait for Arduino to init

}

function conClose {
    echo "$(color green)Closing connection.$(color)"
    echo
    conUnListen
    exit 0
}

function conSend {
    local input="$1"
    [ ! -e $USB_DEVICE ] && return 0;
    echo "$input" > $USB_DEVICE
    sleep 1 # wait for Arduino to respond
}

function conListen {
    [ ! -e $USB_DEVICE ] && return 0;
    $LISTENER &
    LISTENER_PID=$(ps aux | grep $LISTENER | grep -v 'grep' | awk '{print $2}')
}

function conUnListen {
    kill -9 $LISTENER_PID &>/dev/null
}
